{
  "name": "@n8n/n8n-nodes-langchain.embeddingsHuggingFaceInference",
  "displayName": "Embeddings Hugging Face Inference",
  "description": "Use HuggingFace Inference Embeddings",
  "properties": [
    {
      "displayName": "This node must be connected to a vector store. <a data-action='openSelectiveNodeCreator' data-action-parameter-connectiontype='ai_vectorStore'>Insert one</a>",
      "name": "notice",
      "type": "notice",
      "default": "",
      "typeOptions": {
        "containerClass": "ndv-connection-hint-notice"
      }
    },
    {
      "displayName": "Each model is using different dimensional density for embeddings. Please make sure to use the same dimensionality for your vector store. The default model is using 768-dimensional embeddings.",
      "name": "notice",
      "type": "notice",
      "default": ""
    },
    {
      "displayName": "Model Name",
      "name": "modelName",
      "type": "string",
      "default": "sentence-transformers/distilbert-base-nli-mean-tokens",
      "description": "The model name to use from HuggingFace library"
    },
    {
      "displayName": "Options",
      "name": "options",
      "placeholder": "Add Option",
      "description": "Additional options to add",
      "type": "collection",
      "default": {},
      "options": [
        {
          "displayName": "Custom Inference Endpoint",
          "name": "endpointUrl",
          "default": "",
          "description": "Custom endpoint URL",
          "type": "string"
        },
        {
          "displayName": "Provider",
          "name": "provider",
          "type": "options",
          "options": [
            {
              "value": "black-forest-labs",
              "name": "black-forest-labs"
            },
            {
              "value": "cerebras",
              "name": "cerebras"
            },
            {
              "value": "cohere",
              "name": "cohere"
            },
            {
              "value": "fal-ai",
              "name": "fal-ai"
            },
            {
              "value": "featherless-ai",
              "name": "featherless-ai"
            },
            {
              "value": "fireworks-ai",
              "name": "fireworks-ai"
            },
            {
              "value": "groq",
              "name": "groq"
            },
            {
              "value": "hf-inference",
              "name": "hf-inference"
            },
            {
              "value": "hyperbolic",
              "name": "hyperbolic"
            },
            {
              "value": "nebius",
              "name": "nebius"
            },
            {
              "value": "novita",
              "name": "novita"
            },
            {
              "value": "nscale",
              "name": "nscale"
            },
            {
              "value": "openai",
              "name": "openai"
            },
            {
              "value": "ovhcloud",
              "name": "ovhcloud"
            },
            {
              "value": "replicate",
              "name": "replicate"
            },
            {
              "value": "sambanova",
              "name": "sambanova"
            },
            {
              "value": "together",
              "name": "together"
            },
            {
              "value": "auto",
              "name": "auto"
            }
          ],
          "default": "auto"
        }
      ]
    }
  ]
}