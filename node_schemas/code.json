{
  "name": "@n8n/n8n-nodes-langchain.code",
  "displayName": "LangChain Code",
  "description": "LangChain Code Node",
  "properties": [
    {
      "displayName": "Code",
      "name": "code",
      "placeholder": "Add Code",
      "type": "fixedCollection",
      "noDataExpression": true,
      "default": {},
      "options": [
        {
          "name": "execute",
          "displayName": "Execute",
          "values": [
            {
              "displayName": "JavaScript - Execute",
              "name": "code",
              "type": "string",
              "typeOptions": {
                "editor": "jsEditor"
              },
              "default": "const { PromptTemplate } = require('@langchain/core/prompts');\n\nconst query = 'Tell me a joke';\nconst prompt = PromptTemplate.fromTemplate(query);\n\n// If you are allowing more than one language model input connection (-1 or\n// anything greater than 1), getInputConnectionData returns an array, so you\n// will have to change the code below it to deal with that. For example, use\n// llm[0] in the chain definition\n\nconst llm = await this.getInputConnectionData('ai_languageModel', 0);\nlet chain = prompt.pipe(llm);\nconst output = await chain.invoke();\nreturn [ {json: { output } } ];",
              "hint": "This code will only run and return data if a \"Main\" input & output got created.",
              "noDataExpression": true
            }
          ]
        },
        {
          "name": "supplyData",
          "displayName": "Supply Data",
          "values": [
            {
              "displayName": "JavaScript - Supply Data",
              "name": "code",
              "type": "string",
              "typeOptions": {
                "editor": "jsEditor"
              },
              "default": "const { WikipediaQueryRun } = require( '@langchain/community/tools/wikipedia_query_run');\nreturn new WikipediaQueryRun();",
              "hint": "This code will only run and return data if an output got created which is not \"Main\".",
              "noDataExpression": true
            }
          ]
        }
      ]
    },
    {
      "displayName": "You can import LangChain and use all available functionality. Debug by using <code>console.log()</code> statements and viewing their output in the browser console.",
      "name": "notice",
      "type": "notice",
      "default": ""
    },
    {
      "displayName": "Inputs",
      "name": "inputs",
      "placeholder": "Add Input",
      "type": "fixedCollection",
      "noDataExpression": true,
      "typeOptions": {
        "multipleValues": true,
        "sortable": true
      },
      "description": "The input to add",
      "default": {},
      "options": [
        {
          "name": "input",
          "displayName": "Input",
          "values": [
            {
              "displayName": "Type",
              "name": "type",
              "type": "options",
              "options": [
                {
                  "name": "Chain",
                  "value": "ai_chain"
                },
                {
                  "name": "Document",
                  "value": "ai_document"
                },
                {
                  "name": "Embedding",
                  "value": "ai_embedding"
                },
                {
                  "name": "Language Model",
                  "value": "ai_languageModel"
                },
                {
                  "name": "Memory",
                  "value": "ai_memory"
                },
                {
                  "name": "Output Parser",
                  "value": "ai_outputParser"
                },
                {
                  "name": "Text Splitter",
                  "value": "ai_textSplitter"
                },
                {
                  "name": "Tool",
                  "value": "ai_tool"
                },
                {
                  "name": "Vector Store",
                  "value": "ai_vectorStore"
                },
                {
                  "name": "Main",
                  "value": "main"
                }
              ],
              "noDataExpression": true,
              "default": "",
              "required": true,
              "description": "The type of the input"
            },
            {
              "displayName": "Max Connections",
              "name": "maxConnections",
              "type": "number",
              "noDataExpression": true,
              "default": -1,
              "required": true,
              "description": "How many nodes of this type are allowed to be connected. Set it to -1 for unlimited."
            },
            {
              "displayName": "Required",
              "name": "required",
              "type": "boolean",
              "noDataExpression": true,
              "default": false,
              "required": true,
              "description": "Whether the input needs a connection"
            }
          ]
        }
      ]
    },
    {
      "displayName": "Outputs",
      "name": "outputs",
      "placeholder": "Add Output",
      "type": "fixedCollection",
      "noDataExpression": true,
      "typeOptions": {
        "multipleValues": true,
        "sortable": true
      },
      "description": "The output to add",
      "default": {},
      "options": [
        {
          "name": "output",
          "displayName": "Output",
          "values": [
            {
              "displayName": "Type",
              "name": "type",
              "type": "options",
              "options": [
                {
                  "name": "Chain",
                  "value": "ai_chain"
                },
                {
                  "name": "Document",
                  "value": "ai_document"
                },
                {
                  "name": "Embedding",
                  "value": "ai_embedding"
                },
                {
                  "name": "Language Model",
                  "value": "ai_languageModel"
                },
                {
                  "name": "Memory",
                  "value": "ai_memory"
                },
                {
                  "name": "Output Parser",
                  "value": "ai_outputParser"
                },
                {
                  "name": "Text Splitter",
                  "value": "ai_textSplitter"
                },
                {
                  "name": "Tool",
                  "value": "ai_tool"
                },
                {
                  "name": "Vector Store",
                  "value": "ai_vectorStore"
                },
                {
                  "name": "Main",
                  "value": "main"
                }
              ],
              "noDataExpression": true,
              "default": "",
              "required": true,
              "description": "The type of the input"
            }
          ]
        }
      ]
    }
  ]
}